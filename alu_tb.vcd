$date
	Sun Jun 01 19:38:20 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 7 ! res [6:0] $end
$var wire 1 " GZ $end
$var wire 1 # CF $end
$var reg 7 $ a [6:0] $end
$var reg 7 % b [6:0] $end
$var reg 1 & op $end
$var integer 32 ' i [31:0] $end
$scope module uut $end
$var wire 7 ( a [6:0] $end
$var wire 7 ) b [6:0] $end
$var wire 1 & op $end
$var wire 1 * carry $end
$var wire 7 + and_res [6:0] $end
$var wire 7 , add_res [6:0] $end
$var wire 1 " GZ $end
$var wire 1 # CF $end
$var reg 7 - res [6:0] $end
$scope module uut0 $end
$var wire 7 . a [6:0] $end
$var wire 7 / b [6:0] $end
$var reg 7 0 result [6:0] $end
$upscope $end
$scope module uut1 $end
$var wire 7 1 a [6:0] $end
$var wire 7 2 b [6:0] $end
$var reg 1 * carry $end
$var reg 7 3 sum [6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0#
0"
b0 !
$end
#10
1"
b1 !
b1 -
b1 +
b1 0
b1010 ,
b1010 3
b1 '
b1001 %
b1001 )
b1001 /
b1001 2
b1 $
b1 (
b1 .
b1 1
#20
b11010 ,
b11010 3
b1101 +
b1101 0
b11010 !
b11010 -
b10 '
b1101 %
b1101 )
b1101 /
b1101 2
b1101 $
b1101 (
b1101 .
b1101 1
1&
#30
b10011 !
b10011 -
b0 +
b0 0
b10011 ,
b10011 3
b11 '
b1 %
b1 )
b1 /
b1 2
b10010 $
b10010 (
b10010 .
b10010 1
#40
1#
b110011 !
b110011 -
1*
b110011 ,
b110011 3
b110100 +
b110100 0
b100 '
b111101 %
b111101 )
b111101 /
b111101 2
b1110110 $
b1110110 (
b1110110 .
b1110110 1
#50
b101 !
b101 -
b1000 +
b1000 0
b101 ,
b101 3
b101 '
b1111001 %
b1111001 )
b1111001 /
b1111001 2
b1100 $
b1100 (
b1100 .
b1100 1
#60
0"
0#
0*
b1101111 ,
b1101111 3
b0 +
b0 0
b0 !
b0 -
b110 '
b101010 %
b101010 )
b101010 /
b101010 2
b1000101 $
b1000101 (
b1000101 .
b1000101 1
0&
#70
1#
1"
b10010 +
b10010 0
1*
b1001 ,
b1001 3
b1001 !
b1001 -
b111 '
b10010 %
b10010 )
b10010 /
b10010 2
b1110111 $
b1110111 (
b1110111 .
b1110111 1
1&
#80
b1000000 !
b1000000 -
b1000000 ,
b1000000 3
b1000010 +
b1000010 0
b1000 '
b1001110 %
b1001110 )
b1001110 /
b1001110 2
b1110010 $
b1110010 (
b1110010 .
b1110010 1
#90
0#
b1000100 +
b1000100 0
b100001 ,
b100001 3
b1000100 !
b1000100 -
b1001 '
b1011100 %
b1011100 )
b1011100 /
b1011100 2
b1000101 $
b1000101 (
b1000101 .
b1000101 1
0&
#100
1#
b10010 ,
b10010 3
b100101 +
b100101 0
b10010 !
b10010 -
b1010 '
b1100101 %
b1100101 )
b1100101 /
b1100101 2
b101101 $
b101101 (
b101101 .
b101101 1
1&
#110
0#
b1010 !
b1010 -
b0 +
b0 0
0*
b1010 ,
b1010 3
b1011 '
b0 %
b0 )
b0 /
b0 2
b1010 $
b1010 (
b1010 .
b1010 1
#120
1"
b1000111 ,
b1000111 3
b1000 +
b1000 0
b1000 !
b1000 -
b1100 '
b11101 %
b11101 )
b11101 /
b11101 2
b101010 $
b101010 (
b101010 .
b101010 1
0&
#130
b1 !
b1 -
b1 +
b1 0
b100000 ,
b100000 3
b1101 '
b1101 %
b1101 )
b1101 /
b1101 2
b10011 $
b10011 (
b10011 .
b10011 1
#140
1#
1*
b1000000 ,
b1000000 3
b1000001 +
b1000001 0
b1000000 !
b1000000 -
b1110 '
b1010101 %
b1010101 )
b1010101 /
b1010101 2
b1101011 $
b1101011 (
b1101011 .
b1101011 1
1&
#150
0#
b1100 +
b1100 0
0*
b1001011 ,
b1001011 3
b1100 !
b1100 -
b1111 '
b11101 %
b11101 )
b11101 /
b11101 2
b101110 $
b101110 (
b101110 .
b101110 1
0&
#160
